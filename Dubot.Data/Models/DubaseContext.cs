// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Dubot.Data.Models
{
    public partial class DubaseContext : DbContext
    {
        public DubaseContext()
        {
        }

        public DubaseContext(DbContextOptions<DubaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BotCommand> BotCommands { get; set; }
        public virtual DbSet<BotCommandAlias> BotCommandAliases { get; set; }
        public virtual DbSet<BotCommandParameter> BotCommandParameters { get; set; }
        public virtual DbSet<CommandStat> CommandStats { get; set; }
        public virtual DbSet<Guild> Guilds { get; set; }
        public virtual DbSet<GuildMember> GuildMembers { get; set; }
        public virtual DbSet<GuildSetting> GuildSettings { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.\\sqlexpress;Initial Catalog=DuBase;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<BotCommand>(entity =>
            {
                entity.Property(e => e.Display).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<BotCommandAlias>(entity =>
            {
                entity.Property(e => e.Alias).HasDefaultValueSql("('')");

                entity.HasOne(d => d.Command)
                    .WithMany(p => p.BotCommandAliases)
                    .HasForeignKey(d => d.CommandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BotCommandAlias_BotCommands");
            });

            modelBuilder.Entity<BotCommandParameter>(entity =>
            {
                entity.Property(e => e.ParamName).HasDefaultValueSql("('')");

                entity.HasOne(d => d.Command)
                    .WithMany(p => p.BotCommandParameters)
                    .HasForeignKey(d => d.CommandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BotCommandParameter_BotCommands");
            });

            modelBuilder.Entity<CommandStat>(entity =>
            {
                entity.HasOne(d => d.Command)
                    .WithMany(p => p.CommandStats)
                    .HasForeignKey(d => d.CommandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CommandStats_BotCommands");
            });

            modelBuilder.Entity<Guild>(entity =>
            {
                entity.Property(e => e.GuildId).ValueGeneratedNever();

                entity.Property(e => e.Name).HasDefaultValueSql("('')");

                entity.Property(e => e.Owner).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GuildMember>(entity =>
            {
                entity.HasOne(d => d.Guild)
                    .WithMany(p => p.GuildMembers)
                    .HasForeignKey(d => d.GuildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuildMembers_Guilds1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.GuildMembers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuildMembers_Users");
            });

            modelBuilder.Entity<GuildSetting>(entity =>
            {
                entity.HasOne(d => d.Guild)
                    .WithMany(p => p.GuildSettings)
                    .HasForeignKey(d => d.GuildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuildSettings_Guilds");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.GuildSettings)
                    .HasForeignKey(d => d.SettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuildSettings_Settings");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Items_ItemCategories");
            });

            modelBuilder.Entity<ItemCategory>(entity =>
            {
                entity.Property(e => e.CategoryName).IsUnicode(false);

                entity.Property(e => e.ParentCategoryName).IsUnicode(false);

                entity.Property(e => e.Sequence).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.InverseParentCategory)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .HasConstraintName("FK_ItemCategories_ItemCategories");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.Property(e => e.SettingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}